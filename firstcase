from sage.all import *

## Here we assume over single variable, x
## Ask for degree and the matrix factorizations X and Y, then the hom equiv classes, F and G

n = input("Enter the degree of the singularity: ")

X1 = input("Enter the matrix factorization X, separated by a comma: ")
X = matrix([[0,X1[0]],[X1[1],0]])

Y1 = input("Enter the matrix factorization Y, separated by a comma: ")
Y = matrix([[0,Y1[0]],[Y1[1],0]])

Xn = matrix([[0,X1[1]],[X1[0],0]])

F1 = input("Enter the equivalence class morphisms alpha and beta for F, separated by a comma: ")
F = matrix([[0,F1[0]],[F1[1],0]])

G1 = input("Enter the equivalence class morphisms alpha and beta for G, separated by a comma: ")

## Composes F and G into one off-diagonal matrix to then multiply
F[0,1] = G1[0]*F1[0]
F[1,1] = G1[1]*F1[1]

dY = Y.derivative(x)

mult = F*dY
trace = mult[0,0] + mult[1,1]

sing = x**n

der = sing.derivative(x)

divide = trace/der

series = taylor(divide,x,0,-1)

set = series.operands()

l = len(set)

stset = str(set)
k = len(stset)

star = stset.find('/x')
if star != -1:
	while star != -1:
		if l == 2:
			star = stset.find(' ')
			stset = stset[star+1:k-1]
			break
		stset = stset[1:star]
		star = stset.find(' ')
	fin = SR(stset)
	print(fin)
else:
	print("0")
